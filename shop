#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_NAME_LENGTH 50
#define MAX_CUSTOMERS 100
#define MAX_HISTORY_LENGTH 3

typedef enum { PETITE, MOYENNE, GRANDE } Taille;

typedef struct {
  char nom[MAX_NAME_LENGTH];
  int numeroReference;
  int quantiteEnStock;
  float prix;
  Taille taille;
} Produit;

typedef struct {
  char nom[MAX_NAME_LENGTH];
  char prenom[MAX_NAME_LENGTH];
  int historiqueAchats[MAX_HISTORY_LENGTH];
  int longueurHistorique;
} Client;

Produit produits[50];
int nombreProduits = 0;

Client clients[MAX_CUSTOMERS];
int nombreClients = 0;

float totalAchats = 0.0; // Variable to store the total purchases

int espacePetite = 0;
int espaceMoyenne = 0;
int espaceGrande = 0;

void afficherProduitsFaibleStock() {
  printf("Produits à faible stock :\n");
  int i;
  for (i = 0; i < nombreProduits; i++) {
    if (produits[i].quantiteEnStock <= 5 && produits[i].quantiteEnStock > 0) {
      printf(
          "Nom : %s, Référence : %d, Quantité : %d, Taille : ", produits[i].nom,
          produits[i].numeroReference, produits[i].quantiteEnStock);
      switch (produits[i].taille) {
      case PETITE:
        printf("Petite");
        break;
      case MOYENNE:
        printf("Moyenne");
        break;
      case GRANDE:
        printf("Grande");
        break;
      }
      printf("\n");
    }
  }
  printf("\n");
}

void afficherProduitsStockEpuise() {
  printf("Produits en rupture de stock :\n");
  int i;
  for (i = 0; i < nombreProduits; i++) {
    if (produits[i].quantiteEnStock == 0) {
      printf("Nom : %s, Référence : %d, Taille : ", produits[i].nom,
             produits[i].numeroReference);
      switch (produits[i].taille) {
      case PETITE:
        printf("Petite");
        break;
      case MOYENNE:
        printf("Moyenne");
        break;
      case GRANDE:
        printf("Grande");
        break;
      }
      printf("\n");
    }
  }
  printf("\n");
}

void afficherEspaceRestant() {
  printf("Espace utilisé dans le magasin :\n");
  printf("Petite : %d, Moyenne : %d, Grande : %d\n", espacePetite,
         espaceMoyenne, espaceGrande);
  int espaceTotal =
      50 - (espacePetite + (2 * espaceMoyenne) + (4 * espaceGrande));
  if (espaceTotal >= 0 && espaceTotal <= 50) {
    printf("Espace total restant dans le magasin : %d sur 50 disponibles\n",
           espaceTotal);
  } else if (espaceTotal > 50) {
    printf("Stock insuffisant");
  } else if (espaceTotal < 0) {
    printf("Stock demandé supérieur à la capacité disponible\n");
  }
}

void ajouterProduit(char *nom, int numeroReference, int quantite, float prix,
                    Taille taille) {
  if (nombreProduits >= 50) {
    printf("Capacité maximale de produits atteinte.\n");
    return;
  }

  Produit nouveauProduit;
  strncpy(nouveauProduit.nom, nom, MAX_NAME_LENGTH);
  nouveauProduit.numeroReference = numeroReference;
  nouveauProduit.quantiteEnStock = quantite;
  nouveauProduit.prix = prix;
  nouveauProduit.taille = taille;

  int espaceRequis;
  switch (taille) {
    case PETITE:
      espaceRequis = quantite;
      if (espacePetite + espaceRequis > 50) {
        printf("Impossible d'ajouter le produit. Stock insuffisant.\n");
        return;
      }
      espacePetite += quantite;
      break;
    case MOYENNE:
      espaceRequis = 2 * quantite;
      if (espaceMoyenne + espaceRequis > 50) {
        printf("Impossible d'ajouter le produit. Stock insuffisant.\n");
        return;
      }
      espaceMoyenne += quantite;
      break;
    case GRANDE:
      espaceRequis = 4 * quantite;
      if (espaceGrande + espaceRequis > 50) {
        printf("Impossible d'ajouter le produit. Stock insuffisant.\n");
        return;
      }
      espaceGrande += quantite;
      break;
    default:
      printf("Taille de produit invalide.\n");
      return;
  }

  int espaceTotal =
      50 - (espacePetite + (2 * espaceMoyenne) + (4 * espaceGrande));
  if (espaceTotal > 50) {
    printf("Impossible d'ajouter le produit. Capacité de stockage atteinte.\n");
    switch (taille) {
      case PETITE:
        espacePetite += quantite;
        break;
      case MOYENNE:
        espaceMoyenne += quantite;
        break;
      case GRANDE:
        espaceGrande += quantite;
        break;
    }
    return;
  }

  produits[nombreProduits++] = nouveauProduit;
}


Produit *trouverProduitParNom(char *nom) {
  int i;
  for (i = 0; i < nombreProduits; i++) {
    if (strcmp(produits[i].nom, nom) == 0) {
      return &produits[i];
    }
  }
  return NULL;
}

Produit *trouverProduitParReference(int numeroReference) {
  int i;
  for (i = 0; i < nombreProduits; i++) {
    if (produits[i].numeroReference == numeroReference) {
      return &produits[i];
    }
  }
  return NULL;
}

void augmenterStock(Produit *produit, int quantite) {
  if (produit == NULL) {
    printf("Produit introuvable.\n");
    return;
  }

  int espaceRequis;
  switch (produit->taille) {
  case PETITE:
    espaceRequis = quantite;
    break;
  case MOYENNE:
    espaceRequis = 2 * quantite;
    break;
  case GRANDE:
    espaceRequis = 4 * quantite;
    break;
  default:
    printf("Taille de produit invalide.\n");
    return;
  }

  int espaceDisponible =
      50 - (espacePetite + (2 * espaceMoyenne) + (4 * espaceGrande));
  if (espaceDisponible < espaceRequis) {
    printf("Impossible d'augmenter le stock. Stock insuffisant.\n");
    return;
  }

  if (produit->quantiteEnStock + quantite >= 0) {
    produit->quantiteEnStock += quantite;

    switch (produit->taille) {
    case PETITE:
      espacePetite += quantite;
      break;
    case MOYENNE:
      espaceMoyenne += quantite;
      break;
    case GRANDE:
      espaceGrande += quantite;
      break;
    }

    int espaceDisponible =
        50 - (espacePetite + (2 * espaceMoyenne) + (4 * espaceGrande));
    if (espaceDisponible <= 50 && espaceDisponible >= 0) {
      printf("Stock augmenté avec succès.\n");
    } else {
      printf("Quantité de stock invalide.\n");
    }
  }
}

void afficherHistoriqueAchats(Client *client) {
  printf("Historique des achats :\n");
  int i;
  for (i = 0; i < client->longueurHistorique; i++) {
    printf("Achat : %d Quantité : %d\n", i + 1, client->historiqueAchats[i]);
  }
  printf("\n");
}

Client *trouverClientParNom(char *prenom, char *nom) {
  int i;
  for (i = 0; i < nombreClients; i++) {
    if (strcmp(clients[i].prenom, prenom) == 0 &&
        strcmp(clients[i].nom, nom) == 0) {
      return &clients[i];
    }
  }
  return NULL;
}

void ajouterClient(char *prenom, char *nom) {
  if (nombreClients >= MAX_CUSTOMERS) {
    printf("Capacité maximale de clients atteinte.\n");
    return;
  }

  Client nouveauClient;
  strncpy(nouveauClient.prenom, prenom, MAX_NAME_LENGTH);
  strncpy(nouveauClient.nom, nom, MAX_NAME_LENGTH);
  nouveauClient.longueurHistorique = 0;

  clients[nombreClients++] = nouveauClient;

  totalAchats = 0.0; // Reset totalAchats for new client
  printf("Client ajouté avec succès. :) \n");

  // Création du fichier de sauvegarde du client
  char nomFichier[MAX_NAME_LENGTH * 2 +
                  5]; // Nom du fichier au format "prenom_nom.txt"
  snprintf(nomFichier, sizeof(nomFichier), "%s_%s.txt", prenom, nom);

  FILE *fichier = fopen(nomFichier, "w");
  if (fichier != NULL) {
    fprintf(fichier, "Prénom : %s\n", prenom);
    fprintf(fichier, "Nom : %s\n", nom);
    fprintf(fichier, "Total des achats dans le magasin : %.2f\n",
            totalAchats); // write totalAchats to file
    fclose(fichier);
    printf("Fiche client sauvegardée avec succès.\n");
  } else {
    printf("Erreur lors de la création du fichier de sauvegarde.\n");
  }
}

void supprimerClient(Client *client) {
  int i;
  for (i = 0; i < nombreClients; i++) {
    if (&clients[i] == client) {
      // Décaler le tableau clients vers la gauche
      for (; i < nombreClients - 1; i++) {
        clients[i] = clients[i + 1];
      }
      nombreClients--;
      printf("Client supprimé avec succès.\n");

      // Suppression du fichier client
      char nomFichier[MAX_NAME_LENGTH * 2 +
                      5]; // Nom du fichier au format "prenom_nom.txt"
      snprintf(nomFichier, sizeof(nomFichier), "%s_%s.txt", client->prenom,
               client->nom);

      if (remove(nomFichier) == 0) {
        printf("Fiche client supprimée avec succès.\n");
      } else {
        printf("Erreur lors de la suppression de la fiche client.\n");
      }

      break;
    }
  }
}

void effectuerAchat(Client *client, Produit *produit, int quantite) {
  if (produit == NULL) {
    printf("Produit introuvable.\n");
    return;
  }

  if (produit->quantiteEnStock >= quantite) {
    float prixTotal = produit->prix * quantite;
    printf("Produit(s) acheté(s) : %s, Quantité : %d, Prix unitaire : %.2f, "
           "Prix total : %.2f\n",
           produit->nom, quantite, produit->prix, prixTotal);
    produit->quantiteEnStock -= quantite;

    if (client != NULL) {
      if (client->longueurHistorique < MAX_HISTORY_LENGTH) {
        client->historiqueAchats[client->longueurHistorique++] =
            produit->numeroReference;
      } else {
        int i;
        for (i = 0; i < MAX_HISTORY_LENGTH - 1; i++) {
          client->historiqueAchats[i] = client->historiqueAchats[i + 1];
        }
        client->historiqueAchats[MAX_HISTORY_LENGTH - 1] =
            produit->numeroReference;
      }

      totalAchats += prixTotal; // Add the total price to the total purchases

      // Update the client file
      char nomFichier[MAX_NAME_LENGTH * 2 + 5];
      snprintf(nomFichier, sizeof(nomFichier), "%s_%s.txt", client->prenom,
               client->nom);

      FILE *fichier = fopen(nomFichier, "a");
      if (fichier != NULL) {
        fprintf(fichier,
                "Achat : %s, Quantité : %d, Prix unitaire : %.2f, Prix total : "
                "%.2f\n",
                produit->nom, quantite, produit->prix, prixTotal);
        fprintf(fichier, "Total des achats dans le magasin : %.2f\n",
                totalAchats);
        fclose(fichier);
      } else {
        printf("Erreur lors de la mise à jour du fichier client.\n");
      }
    }

    // Update the remaining stock and used space
    switch (produit->taille) {
    case PETITE:
      espacePetite -= quantite;
      break;
    case MOYENNE:
      espaceMoyenne -= quantite;
      break;
    case GRANDE:
      espaceGrande -= quantite;
      break;
    }
  } else {
    printf("Stock insuffisant pour l'achat de %d produit(s).\n", quantite);
    printf("Il n'y en a plus en stock.\n");

    printf("Voulez-vous supprimer votre compte client ? (1: Oui, 0: Non) : ");
    int choix;
    scanf("%d", &choix);
    if (choix == 1) {
      supprimerClient(client);
      printf("Votre compte client a été supprimé avec succès.\n");
    }
  }
}

void viderBuffer() {
  int c;
  while ((c = getchar()) != '\n' && c != EOF)
    ;
}

int main() {
  // Adding initial products
  ajouterProduit("Chaussure", 1, 5, 29.99, MOYENNE);
  ajouterProduit("Pantalon", 2, 3, 39.99, GRANDE);
  ajouterProduit("T-shirt", 3, 10, 19.99, PETITE);
  ajouterProduit("Pull", 4, 2, 49.99, MOYENNE);
  ajouterProduit("Manteau", 5, 0, 99.99, GRANDE);
  ajouterProduit("Chapeau", 6, 1, 9.99, PETITE);

  int mode;

  printf("Bienvenue dans le Programme de Gestion de Magasin !\n");

  while (1) {
    printf("Veuillez sélectionner un mode :\n");
    printf("1. Mode Gestion\n");
    printf("2. Mode Achat\n");
    printf("0. Quitter\n");
    printf("Entrez votre choix : ");
    scanf("%d", &mode);
    viderBuffer();

    switch (mode) {
    case 1:
      afficherProduitsFaibleStock();
      afficherProduitsStockEpuise();
      afficherEspaceRestant();

      int choixGestion;
      printf("-> Mode Gestion :\n");
      printf("1. Vérifier le stock d'un produit\n");
      printf("2. Augmenter le stock d'un produit\n");
      printf("0. Quitter\n");
      printf("Entrez votre choix : ");
      scanf("%d", &choixGestion);
      viderBuffer();

      switch (choixGestion) {
      case 1:
        printf("Entrez le nom ou la référence du produit : ");
        char rechercheNom[MAX_NAME_LENGTH];
        fgets(rechercheNom, sizeof(rechercheNom), stdin);
        rechercheNom[strcspn(rechercheNom, "\n")] = '\0';
        int rechercheReference;
        if (sscanf(rechercheNom, "%d", &rechercheReference) == 1) {
          Produit *produitTrouve =
              trouverProduitParReference(rechercheReference);
          if (produitTrouve != NULL) {
            printf("Produit trouvé : %s, Quantité en stock : %d\n",
                   produitTrouve->nom, produitTrouve->quantiteEnStock);
          } else {
            printf("Aucun produit trouvé.\n");
          }
        } else {
          Produit *produitTrouve = trouverProduitParNom(rechercheNom);
          if (produitTrouve != NULL) {
            printf("Produit trouvé : %s, Quantité en stock : %d\n",
                   produitTrouve->nom, produitTrouve->quantiteEnStock);
          } else {
            printf("Aucun produit trouvé.\n");
          }
        }
        break;
      case 2:
        printf("Entrez la référence du produit : ");
        int referenceProduit;
        scanf("%d", &referenceProduit);
        viderBuffer();

        Produit *produitAAugmenter =
            trouverProduitParReference(referenceProduit);

        if (produitAAugmenter != NULL) {
          printf("Entrez la quantité à ajouter : ");
          int quantiteAAjouter;
          scanf("%d", &quantiteAAjouter);
          viderBuffer();

          augmenterStock(produitAAugmenter, quantiteAAjouter);
        } else {
          printf("Produit introuvable.\n");
        }

        break;
      case 0:
        break;
      default:
        printf("Choix invalide.\n");
        break;
      }
      if (choixGestion == 0) {
        break;
      }
      break;
    case 2:
      printf("-> Mode Achat :\n");
      printf("Entrez votre prénom : ");
      char prenom[MAX_NAME_LENGTH];
      fgets(prenom, sizeof(prenom), stdin);
      prenom[strcspn(prenom, "\n")] = '\0';
      printf("Entrez votre nom : ");
      char nom[MAX_NAME_LENGTH];
      fgets(nom, sizeof(nom), stdin);
      nom[strcspn(nom, "\n")] = '\0';

      Client *clientActuel = trouverClientParNom(prenom, nom);
      if (clientActuel == NULL) {
        printf("Client non trouvé. Voulez-vous créer un compte ? (1: Oui, 0: "
               "Non) : ");
        int choixCreationCompte;
        scanf("%d", &choixCreationCompte);
        viderBuffer();
        if (choixCreationCompte == 1) {
          ajouterClient(prenom, nom);
          clientActuel = trouverClientParNom(prenom, nom);
        }
      }

      if (clientActuel != NULL) {
        int choixAchat;
        printf("1. Acheter un produit\n");
        printf("2. Afficher l'historique des achats\n");
        printf("0. Quitter\n");
        printf("Entrez votre choix : ");
        scanf("%d", &choixAchat);
        viderBuffer();

        switch (choixAchat) {
        case 1:
          while (1) {
            printf("Entrez la référence du produit que vous souhaitez acheter "
                   "(0 pour quitter) : ");
            int referenceProduit;
            scanf("%d", &referenceProduit);
            viderBuffer();
            if (referenceProduit == 0) {
              printf("Total des achats dans le magasin : %.2f\n", totalAchats);
              break;
            }
            printf("Entrez la quantité que vous souhaitez acheter : ");
            int quantiteAchat;
            scanf("%d", &quantiteAchat);
            viderBuffer();
            Produit *produitAAcheter =
                trouverProduitParReference(referenceProduit);
            effectuerAchat(clientActuel, produitAAcheter, quantiteAchat);
          }
          break;
        case 2:
          afficherHistoriqueAchats(clientActuel);
          break;
        case 0:
          printf("Total des achats dans le magasin : %.2f\n", totalAchats);
          break;
        default:
          printf("Choix invalide.\n");
          break;
        }
      } else {
        printf("Opération annulée. Client non trouvé.\n");
      }
      break;
    case 0:
      printf("Total des achats dans le magasin : %.2f\n", totalAchats);
      printf("Merci d'avoir utilisé le Programme de Gestion de Magasin. Au "
             "revoir !\n");
      return 0;
    default:
      printf("Choix invalide.\n");
      break;
    }
  }

  return 0;
}
